import React from 'react';
import './App.css';
import House from './house';

const HOUSES_ENDPOINT = 'https://ancient-taiga-31359.herokuapp.com/api/houses';

export default class App extends React.Component{
	constructor (props){
		super(props);
		this.addNewRoom = this.addNewRoom.bind(this);
		this.deleteRoom = this.deleteRoom.bind(this);
	}

	render(){
	{/* If the state is not null, iterate through all the houses on the state,
			and create a house element out of them. Using the ternary operator, if not
			it's null and we won't render anything. */}
		const houses = this.state
			? this.state.houses.map((house, index) => 
				<House
					key={index}
					data={house}
					addNewRoom = {this.addNewRoom}
					deleteRoom = {this.deleteRoom} /> )
				: null;
		return (
			<div>
				{houses}
				<Person name='Tom' age='32'/>
				<Person name='Sally' age='34'/>
			</div>
		);	
	}

	componentDidMount(){
		fetch(HOUSES_ENDPOINT)
			.then(res => res.json())
			.then(data => {
				this.setState({
					houses: data
				});
			});
	}

	deleteRoom(e, house, room){
		const index = house.rooms.indexOf(room);
		house.rooms.splice(index, 1);
		updateHouse(house)
			.then(() => {
				this.setState(state => {
					for (let h of state.houses) {
						if (h._id === house._id){
							let h = house;
							break;
						}
					}
					return state;
				});
			});
		e.preventDefault();
	}
	
	addNewRoom(e, house, room){
		house.rooms.push(room);
		updateHouse(house)
			.then(() => {
				this.setState(state => {
					for (let h of state.houses) {
						if (h._id === house._id){
							let h = house;
							break;
						}
					}
					return state;
				});
			});
		e.preventDefault();
	}
}

function updateHouse(house){
	return fetch(`${HOUSES_ENDPOINT}/${house._id}`,{
		method: 'PUT',
		headers: {
			'Content-Type': 'application/json'
		},
		body: JSON.stringify(house)
	});
}

{/* Creating a functional component, unrelated to House App 
		Person is just a function that returns some JSX, there is no state
		or anything else needed.The majority of components we will see are 
			going to be functional componenets*/}
const Person = (props) => {
	const {name, age} = props;
	return (
		<div>
			<h1> {name} </h1>
			<h2> Pereson Age: {age} </h2>
		</div>
	);
};
